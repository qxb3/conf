#!/usr/bin/gjs -m
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// ../../../../../../../usr/share/astal/gjs/overrides.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemas");
  patch(Player.prototype, "supportedUriSchemas");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification: Notification2 }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification2.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../../../../usr/share/astal/gjs/process.ts
import Astal from "gi://AstalIO";
var { Process } = Astal;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal.Process.subprocessv(cmd) : Astal.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function exec(cmd) {
  return Array.isArray(cmd) ? Astal.Process.execv(cmd) : Astal.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../../../usr/share/astal/gjs/time.ts
import Astal2 from "gi://AstalIO";
var { Time } = Astal2;
function interval(interval2, callback) {
  return Astal2.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal2.Time.timeout(timeout2, () => void callback?.());
}

// ../../../../../../../usr/share/astal/gjs/file.ts
import Astal3 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";
function readFile(path) {
  return Astal3.read_file(path) || "";
}
function monitorFile(path, callback) {
  return Astal3.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// ../../../../../../../usr/share/astal/gjs/gobject.ts
import GObject from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject;
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
function register(options = {}) {
  return function(cls) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    GObject.registerClass({
      Signals: { ...cls[meta]?.Signals },
      Properties: { ...cls[meta]?.Properties },
      ...options
    }, cls);
    delete cls[meta];
  };
}
function property(declaration = Object) {
  return function(target, prop, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Properties ??= {};
    const name = kebabify(prop);
    if (!desc) {
      Object.defineProperty(target, prop, {
        get() {
          return this[priv]?.[prop] ?? defaultValue(declaration);
        },
        set(v) {
          if (v !== this[prop]) {
            this[priv] ??= {};
            this[priv][prop] = v;
            this.notify(name);
          }
        }
      });
      Object.defineProperty(target, `set_${name.replace("-", "_")}`, {
        value(v) {
          this[prop] = v;
        }
      });
      Object.defineProperty(target, `get_${name.replace("-", "_")}`, {
        value() {
          return this[prop];
        }
      });
      target.constructor[meta].Properties[kebabify(prop)] = pspec(name, ParamFlags.READWRITE, declaration);
    } else {
      let flags = 0;
      if (desc.get) flags |= ParamFlags.READABLE;
      if (desc.set) flags |= ParamFlags.WRITABLE;
      target.constructor[meta].Properties[kebabify(prop)] = pspec(name, flags, declaration);
    }
  };
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec)
    return declaration;
  switch (declaration) {
    case String:
      return ParamSpec.string(name, "", "", flags, "");
    case Number:
      return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
    case Boolean:
      return ParamSpec.boolean(name, "", "", flags, false);
    case Object:
      return ParamSpec.jsobject(name, "", "", flags);
    default:
      return ParamSpec.object(name, "", "", flags, declaration.$gtype);
  }
}
function defaultValue(declaration) {
  if (declaration instanceof ParamSpec)
    return declaration.get_default_value();
  switch (declaration) {
    case String:
      return "default-string";
    case Number:
      return 0;
    case Boolean:
      return false;
    case Object:
    default:
      return null;
  }
}

// ../../../../../../../usr/share/astal/gjs/binding.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify2(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify2(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;

// ../../../../../../../usr/share/astal/gjs/variable.ts
import Astal4 from "gi://AstalIO";
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal4.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = Binding.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec2, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec2 === "function") {
      this.pollFn = exec2;
      delete this.pollExec;
    } else {
      this.pollExec = exec2;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec2, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec2;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var variable_default = Variable;

// globals.ts
var user = exec(`whoami`);
var homeDir = exec(`bash -c 'echo $HOME'`);
Object.assign(globalThis, {
  USER: user,
  HOME_DIR: homeDir,
  LOCAL_STATE: `${homeDir}/.local/state/theme`,
  TMP: `/tmp`,
  ANIMATION_SPEED: 300
});

// ../../../../../../../usr/share/astal/gjs/gtk3/index.ts
import Astal8 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../../../../usr/share/astal/gjs/gtk3/astalify.ts
import Astal5 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject2 from "gi://GObject";
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof Binding ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof Binding);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify2(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function astalify(cls, clsName = cls.name) {
  class Widget extends cls {
    get css() {
      return Astal5.widget_get_css(this);
    }
    set css(css) {
      Astal5.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal5.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal5.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal5.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal5.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal5.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal5.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this.__no_implicit_destroy;
    }
    set noImplicitDestroy(value) {
      this.__no_implicit_destroy = value;
    }
    _setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Bin) {
        const ch = this.get_child();
        if (ch)
          this.remove(ch);
        if (ch && !children.includes(ch) && !this.noImplicitDestroy)
          ch?.destroy();
      } else if (this instanceof Gtk.Container) {
        for (const ch of this.get_children()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      if (this instanceof Astal5.Box) {
        this.set_children(children);
      } else if (this instanceof Astal5.Stack) {
        this.set_children(children);
      } else if (this instanceof Astal5.CenterBox) {
        this.startWidget = children[0];
        this.centerWidget = children[1];
        this.endWidget = children[2];
      } else if (this instanceof Astal5.Overlay) {
        const [child, ...overlays] = children;
        this.set_child(child);
        this.set_overlays(overlays);
      } else if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}, it is not a container widget`);
      }
    }
    toggleClassName(cn, cond = true) {
      Astal5.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      if (typeof object.connect === "function" && callback) {
        const id = object.connect(signalOrCallback, (_, ...args) => {
          callback(this, ...args);
        });
        this.connect("destroy", () => {
          object.disconnect(id);
        });
      } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
        const unsub = object.subscribe((...args) => {
          signalOrCallback(this, ...args);
        });
        this.connect("destroy", unsub);
      }
      return this;
    }
    constructor(...params) {
      super();
      const [config] = params;
      const { setup, child, children = [], ...props } = config;
      props.visible ??= true;
      if (child)
        children.unshift(child);
      const bindings = Object.keys(props).reduce((acc, prop) => {
        if (props[prop] instanceof Binding) {
          const binding = props[prop];
          delete props[prop];
          return [...acc, [prop, binding]];
        }
        return acc;
      }, []);
      const onHandlers = Object.keys(props).reduce((acc, key) => {
        if (key.startsWith("on")) {
          const sig = kebabify2(key).split("-").slice(1).join("-");
          const handler = props[key];
          delete props[key];
          return [...acc, [sig, handler]];
        }
        return acc;
      }, []);
      const mergedChildren = mergeBindings(children.flat(Infinity));
      if (mergedChildren instanceof Binding) {
        this._setChildren(mergedChildren.get());
        this.connect("destroy", mergedChildren.subscribe((v) => {
          this._setChildren(v);
        }));
      } else {
        if (mergedChildren.length > 0) {
          this._setChildren(mergedChildren);
        }
      }
      for (const [signal, callback] of onHandlers) {
        if (typeof callback === "function") {
          this.connect(signal, callback);
        } else {
          this.connect(signal, () => execAsync(callback).then(print).catch(console.error));
        }
      }
      for (const [prop, binding] of bindings) {
        if (prop === "child" || prop === "children") {
          this.connect("destroy", binding.subscribe((v) => {
            this._setChildren(v);
          }));
        }
        this.connect("destroy", binding.subscribe((v) => {
          setProp(this, prop, v);
        }));
        setProp(this, prop, binding.get());
      }
      Object.assign(this, props);
      setup?.(this);
    }
  }
  GObject2.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject2.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject2.ParamSpec.string(
        "css",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject2.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject2.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject2.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget);
  return Widget;
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal6 from "gi://Astal?version=3.0";

// ../../../../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject3 from "gi://GObject";
function mkApp(App2) {
  return new class AstalJS extends App2 {
    static {
      GObject3.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler: requestHandler2, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler2;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_message(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal6.Application);

// ../../../../../../../usr/share/astal/gjs/gtk3/widget.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject4 from "gi://GObject";
Object.defineProperty(Astal7.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal7.Box) {
  static {
    GObject4.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Button = class extends astalify(Astal7.Button) {
  static {
    GObject4.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal7.CenterBox) {
  static {
    GObject4.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var CircularProgress = class extends astalify(Astal7.CircularProgress) {
  static {
    GObject4.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject4.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject4.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal7.EventBox) {
  static {
    GObject4.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal7.Icon) {
  static {
    GObject4.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal7.Label) {
  static {
    GObject4.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var LevelBar = class extends astalify(Astal7.LevelBar) {
  static {
    GObject4.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
Object.defineProperty(Astal7.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal7.Overlay) {
  static {
    GObject4.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject4.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal7.Scrollable) {
  static {
    GObject4.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal7.Slider) {
  static {
    GObject4.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal7.Stack) {
  static {
    GObject4.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject4.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal7.Window) {
  static {
    GObject4.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// cssHotReload.ts
function compileScss() {
  try {
    exec(`sass ${"/home/qxb3/.config/ags"}/styles.scss ${TMP}/styles.css --load-path="${LOCAL_STATE}"`);
    app_default.apply_css("/tmp/styles.css");
    return `${TMP}/styles.scss`;
  } catch (err) {
    printerr("Error compiling scss files.", err);
    return "";
  }
}
(function() {
  const scssFiles = exec(`find -L ${"/home/qxb3/.config/ags"} -iname '*.scss'`).split("\n");
  scssFiles.push(`${HOME_DIR}/.local/state/theme/ags_theme.scss`);
  compileScss();
  scssFiles.forEach(
    (file) => monitorFile(file, compileScss)
  );
})();

// windows/bar/Bar.tsx
import HyprlandService from "gi://AstalHyprland";
import TrayService from "gi://AstalTray";
import BatteryService3 from "gi://AstalBattery";

// widgets/BatteryIcon.tsx
import BatteryService from "gi://AstalBattery";

// ../../../../../../../usr/share/astal/gjs/gtk3/jsx-runtime.ts
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    return new ctors[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx;

// widgets/BatteryIcon.tsx
var battery = BatteryService.get_default();
function BatteryIcon({ className = "", charging }) {
  return /* @__PURE__ */ jsx(
    "label",
    {
      className,
      label: bind(battery, "percentage").as((percentage) => {
        percentage *= 100;
        if (!charging) {
          if (percentage < 5) return "\u{F008E}";
          if (percentage < 10) return "\u{F007A}";
          if (percentage < 20) return "\u{F007B}";
          if (percentage < 30) return "\u{F007C}";
          if (percentage < 40) return "\u{F007D}";
          if (percentage < 50) return "\u{F007E}";
          if (percentage < 60) return "\u{F007F}";
          if (percentage < 70) return "\u{F0080}";
          if (percentage < 80) return "\u{F0081}";
          if (percentage < 90) return "\u{F0082}";
          if (percentage <= 100) return "\u{F0079}";
        }
        if (charging) {
          if (percentage < 10) return "\u{F089C}";
          if (percentage < 20) return "\u{F0086}";
          if (percentage < 30) return "\u{F0087}";
          if (percentage < 40) return "\u{F0088}";
          if (percentage < 50) return "\u{F089D}";
          if (percentage < 60) return "\u{F0089}";
          if (percentage < 70) return "\u{F089E}";
          if (percentage < 80) return "\u{F008A}";
          if (percentage < 90) return "\u{F008B}";
          if (percentage <= 100) return "\u{F0085}";
        }
      })
    }
  );
}

// windows/bar/menu/AudioControlsMenu.tsx
import WPSerivce from "gi://AstalWp";
import MprisService from "gi://AstalMpris";

// windows/bar/menu/vars.ts
var time = Variable("").poll(1e3, `date +'%H
%M'`);
var revealSysTray = Variable(false);
var revealAudioControlsMenu = Variable(false);
var revealSystemControlsMenu = Variable(false);
var revealBatteryMenu = Variable(false);
var revealCalendarMenu = Variable(false);
revealAudioControlsMenu.subscribe((value) => {
  if (value) {
    revealSystemControlsMenu.set(false);
    revealBatteryMenu.set(false);
    revealCalendarMenu.set(false);
  }
});
revealSystemControlsMenu.subscribe((value) => {
  if (value) {
    revealAudioControlsMenu.set(false);
    revealBatteryMenu.set(false);
    revealCalendarMenu.set(false);
  }
});
revealBatteryMenu.subscribe((value) => {
  if (value) {
    revealAudioControlsMenu.set(false);
    revealSystemControlsMenu.set(false);
    revealCalendarMenu.set(false);
  }
});
revealCalendarMenu.subscribe((value) => {
  if (value) {
    revealAudioControlsMenu.set(false);
    revealSystemControlsMenu.set(false);
    revealBatteryMenu.set(false);
  }
});

// windows/bar/sidebar/vars.ts
var revealSideBar = Variable(false);
var sideBarShown = Variable("home");
var sideBarWidth = Variable(0);
revealSideBar.subscribe((value) => {
  if (value) {
    revealAudioControlsMenu.set(false);
    revealSystemControlsMenu.set(false);
    revealBatteryMenu.set(false);
    revealCalendarMenu.set(false);
  }
  if (!value) {
    sideBarShown.set("home");
  }
});

// windows/bar/menu/AudioControlsMenu.tsx
var audio = WPSerivce.get_default().audio;
var spotify = MprisService.Player.new("spotify");
function AudioControlsMenu() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "audio_controls_menu menu",
      spacing: 8,
      children: [
        bind(audio, "defaultSpeaker").as((speaker) => /* @__PURE__ */ jsxs(
          "box",
          {
            className: "global_vol slider_container",
            vertical: true,
            spacing: 8,
            children: [
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: bind(speaker, "mute").as(
                    (isMute) => isMute ? "slider mute" : "slider"
                  ),
                  cursor: "pointer",
                  value: bind(speaker, "volume"),
                  max: 1.5,
                  step: 0.01,
                  vexpand: true,
                  drawValue: false,
                  vertical: true,
                  inverted: true,
                  onDragged: ({ value }) => speaker.set_volume(value)
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => speaker.set_mute(!speaker.get_mute()),
                  children: /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "icon",
                      label: bind(speaker, "mute").as((isMute) => !isMute ? "\u{F057E}" : "\u{F0E08}")
                    }
                  )
                }
              )
            ]
          }
        )),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "music_vol slider_container",
            vertical: true,
            spacing: 8,
            children: [
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: "slider",
                  cursor: "pointer",
                  value: bind(spotify, "volume"),
                  max: 1,
                  step: 0.01,
                  vexpand: true,
                  drawValue: false,
                  vertical: true,
                  inverted: true,
                  onDragged: ({ value }) => spotify.set_volume(value)
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => spotify.set_volume(spotify.get_volume() <= 0 ? 100 : 0),
                  children: /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "icon",
                      label: bind(spotify, "volume").as((volume) => volume <= 0 ? "\u{F038A}" : "\u{F038C}")
                    }
                  )
                }
              )
            ]
          }
        ),
        bind(audio, "defaultMicrophone").as((microphone) => /* @__PURE__ */ jsxs(
          "box",
          {
            className: "mic_vol slider_container",
            vertical: true,
            spacing: 8,
            halign: Gtk4.Align.CENTER,
            children: [
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: bind(microphone, "mute").as((isMute) => isMute ? "slider mute" : "slider"),
                  cursor: "pointer",
                  value: bind(microphone, "volume"),
                  max: 1.5,
                  step: 0.01,
                  vexpand: true,
                  drawValue: false,
                  vertical: true,
                  inverted: true,
                  onDragged: ({ value }) => microphone.set_volume(value)
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => microphone.set_mute(!microphone.get_mute()),
                  children: /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "icon",
                      label: bind(microphone, "mute").as((isMute) => !isMute ? "\u{F036C}" : "\u{F036D}")
                    }
                  )
                }
              )
            ]
          }
        ))
      ]
    }
  );
}
function AudioControlsMenu_default() {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "menu",
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.BOTTOM | Astal8.WindowAnchor.LEFT,
      setup: (self) => app_default.add_window(self),
      children: /* @__PURE__ */ jsx("box", { css: sideBarWidth((width) => `margin-left: ${width}px;`), children: /* @__PURE__ */ jsx(
        "revealer",
        {
          revealChild: revealAudioControlsMenu(),
          transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
          transitionDuration: ANIMATION_SPEED,
          children: /* @__PURE__ */ jsx(AudioControlsMenu, {})
        }
      ) })
    }
  );
}

// services/BrightnessService.ts
var BrightnessService = class extends GObject.Object {
  get brightness() {
    return this._brightness;
  }
  set brightness(value) {
    value = Math.max(0, Math.min(value, 1));
    execAsync(`brightnessctl set ${value * 100}% -q`);
  }
  constructor() {
    super();
    this.interface = exec(`sh -c 'ls -w1 /sys/class/backlight | head -1'`).trim();
    this.interfacePath = `/sys/class/backlight/${this.interface}/brightness`;
    this.maxBrightness = Number(exec(`brightnessctl max`));
    this._brightness = Number(exec(`brightnessctl get`)) / this.maxBrightness;
    monitorFile(this.interfacePath, () => {
      this._brightness = Number(exec(`brightnessctl get`)) / this.maxBrightness;
      this.notify("brightness");
    });
  }
};
__decorateClass([
  property(String)
], BrightnessService.prototype, "interface", 2);
__decorateClass([
  property(String)
], BrightnessService.prototype, "interfacePath", 2);
__decorateClass([
  property(Number)
], BrightnessService.prototype, "maxBrightness", 2);
__decorateClass([
  property(Number)
], BrightnessService.prototype, "brightness", 1);
BrightnessService = __decorateClass([
  register()
], BrightnessService);

// windows/bar/menu/SystemControlsMenu.tsx
var brightness = new BrightnessService();
function SystemControlsMenu() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "system_controls_menu menu",
      spacing: 8,
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          className: "brightness slider_container",
          halign: Gtk4.Align.CENTER,
          vertical: true,
          spacing: 8,
          children: [
            /* @__PURE__ */ jsx(
              "slider",
              {
                className: "slider",
                cursor: "pointer",
                value: bind(brightness, "brightness"),
                drawValue: false,
                vexpand: true,
                vertical: true,
                inverted: true,
                onDragged: ({ value }) => {
                  brightness.brightness = value;
                }
              }
            ),
            /* @__PURE__ */ jsx(
              "label",
              {
                className: "icon",
                label: "\uF522"
              }
            )
          ]
        }
      )
    }
  );
}
function SystemControlsMenu_default() {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "menu",
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.BOTTOM | Astal8.WindowAnchor.LEFT,
      setup: (self) => app_default.add_window(self),
      children: /* @__PURE__ */ jsx("box", { css: sideBarWidth((width) => `margin-left: ${width}px;`), children: /* @__PURE__ */ jsx(
        "revealer",
        {
          revealChild: revealSystemControlsMenu(),
          transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
          transitionDuration: ANIMATION_SPEED,
          children: /* @__PURE__ */ jsx(SystemControlsMenu, {})
        }
      ) })
    }
  );
}

// windows/bar/menu/BatteryMenu.tsx
import BatteryService2 from "gi://AstalBattery";
var battery2 = BatteryService2.get_default();
function toRelativeTime(seconds) {
  if (seconds < 60)
    return `${seconds}sec${seconds === 1 ? "" : "s"}`;
  if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    return `${minutes}min${minutes === 1 ? "" : "s"}`;
  }
  if (seconds < 86400) {
    const hours = Math.floor(seconds / 3600);
    return `${hours}h`;
  }
  const days = Math.floor(seconds / 86400);
  return `${days} day${days === 1 ? "" : "s"}`;
}
function Divider() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "divider",
      hexpand: true
    }
  );
}
function BatteryPercentage({ charging }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "battery_percentage",
      valign: Gtk4.Align.START,
      spacing: 12,
      children: [
        /* @__PURE__ */ jsx(
          BatteryIcon,
          {
            className: charging ? "icon charging" : "icon discharging",
            charging
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "percentage",
            label: bind(battery2, "percentage").as(
              (percentage) => `${(percentage * 100).toFixed(0)}%`
            ),
            xalign: 0
          }
        )
      ]
    }
  );
}
function BatteryInfo({ charging }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "battery_info",
      valign: Gtk4.Align.CENTER,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: charging ? "state charging" : "state discharging",
            label: charging ? "Charging" : "Discharging",
            xalign: 0
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "time_to_full",
            label: bind(battery2, "timeToFull").as(
              (timeToFull) => `- Time To Full: ${toRelativeTime(timeToFull)}`
            ),
            xalign: 0,
            visible: charging
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "time_to_empty",
            label: bind(battery2, "timeToEmpty").as(
              (timeToEmpty) => `- Time To Empty: ${toRelativeTime(timeToEmpty)}`
            ),
            xalign: 0,
            visible: !charging
          }
        )
      ]
    }
  );
}
function BatteryMenu() {
  return /* @__PURE__ */ jsx("box", { className: "battery_menu menu", children: bind(battery2, "charging").as((charging) => /* @__PURE__ */ jsxs(
    "box",
    {
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(BatteryPercentage, { charging }),
        /* @__PURE__ */ jsx(Divider, {}),
        /* @__PURE__ */ jsx(BatteryInfo, { charging })
      ]
    }
  )) });
}
function BatteryMenu_default() {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "menu",
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.BOTTOM | Astal8.WindowAnchor.LEFT,
      setup: (self) => app_default.add_window(self),
      children: /* @__PURE__ */ jsx("box", { css: sideBarWidth((width) => `margin-left: ${width}px;`), children: /* @__PURE__ */ jsx(
        "revealer",
        {
          revealChild: revealBatteryMenu(),
          transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
          transitionDuration: ANIMATION_SPEED,
          children: /* @__PURE__ */ jsx(BatteryMenu, {})
        }
      ) })
    }
  );
}

// widgets/FlowBox.ts
var FlowBox = class extends astalify(Gtk4.FlowBox) {
  static {
    GObject.registerClass(this);
  }
  constructor(props) {
    super(props);
  }
};

// widgets/Calendar.tsx
function Calendar() {
  const currentDate = /* @__PURE__ */ new Date();
  const pageDate = Variable(currentDate);
  const grid = Variable(
    generateGridDates(
      currentDate.getMonth() + 1,
      currentDate.getFullYear()
    )
  );
  pageDate.subscribe((pageDate2) => {
    grid.set(
      generateGridDates(
        pageDate2.getMonth() + 1,
        pageDate2.getFullYear()
      )
    );
  });
  revealCalendarMenu.subscribe((value) => {
    if (!value) {
      pageDate.set(currentDate);
    }
  });
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "calendar",
      vertical: true,
      spacing: 8,
      onDestroy: () => {
        pageDate.drop();
        grid.drop();
      },
      children: [
        /* @__PURE__ */ jsxs("box", { hexpand: true, children: [
          /* @__PURE__ */ jsx(
            "label",
            {
              className: "month_year",
              label: pageDate(
                (date) => `${date.toLocaleDateString("en-US", { month: "long", year: "numeric" })}`
              )
            }
          ),
          /* @__PURE__ */ jsxs(
            "box",
            {
              spacing: 16,
              hexpand: true,
              halign: Gtk4.Align.END,
              children: [
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "control",
                    cursor: "pointer",
                    onClick: () => {
                      const prevDate = new Date(pageDate.get());
                      prevDate.setMonth(prevDate.getMonth() - 1);
                      pageDate.set(prevDate);
                    },
                    children: /* @__PURE__ */ jsx("label", { label: "<" })
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "control",
                    cursor: "pointer",
                    onClicked: () => {
                      const nextDate = new Date(pageDate.get());
                      nextDate.setMonth(nextDate.getMonth() + 1);
                      pageDate.set(nextDate);
                    },
                    children: /* @__PURE__ */ jsx("label", { label: ">" })
                  }
                )
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsx(
          "box",
          {
            spacing: 8,
            hexpand: true,
            vexpand: true,
            homogeneous: true,
            children: ["Mon", "Thu", "Wed", "Thu", "Fri", "Sat", "Sun"].map(
              (day) => /* @__PURE__ */ jsx(
                "label",
                {
                  className: "day_name",
                  label: day
                }
              )
            )
          }
        ),
        /* @__PURE__ */ jsx("box", { className: "divider" }),
        /* @__PURE__ */ jsx(
          FlowBox,
          {
            maxChildrenPerLine: 7,
            columnSpacing: 8,
            rowSpacing: 8,
            homogeneous: true,
            hexpand: true,
            children: grid(
              (grid2) => grid2.map(
                (weeks) => weeks.map(
                  (day) => /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: !day.inCurrent ? day.date.getFullYear() === currentDate.getFullYear() && day.date.getMonth() === currentDate.getMonth() && day.date.getDate() === currentDate.getDate() ? "today not_incurrent day" : "not_incurrent day" : day.date.getFullYear() === currentDate.getFullYear() && day.date.getMonth() === currentDate.getMonth() && day.date.getDate() === currentDate.getDate() ? "today day" : "day",
                      label: day.date.getDate().toString()
                    }
                  )
                )
              )
            )
          }
        )
      ]
    }
  );
}
function generateGridDates(month, year) {
  function daysInMonth(month2, year2) {
    const days2 = [];
    const lastDay = new Date(year2, month2, 0).getDate();
    for (let i = 1; i <= lastDay; i++) {
      days2.push(new Date(year2, month2 - 1, i));
    }
    return days2;
  }
  const firstDayOfMonth = new Date(year, month - 1, 1);
  const lastDayOfMonth = new Date(year, month, 0);
  const weekStart = 1;
  const daysOfWeek = 7;
  const firstWeekDay = (firstDayOfMonth.getDay() - weekStart + daysOfWeek) % daysOfWeek;
  const lastWeekDay = (lastDayOfMonth.getDay() - weekStart + daysOfWeek) % daysOfWeek;
  const prevMonth = month - 1 > 0 ? month - 1 : 12;
  const nextMonth = month + 1 <= 12 ? month + 1 : 1;
  const prevYear = month - 1 > 0 ? year : year - 1;
  const nextYear = month + 1 <= 12 ? year : year + 1;
  const prevMonthDays = daysInMonth(prevMonth, prevYear);
  const nextMonthDays = daysInMonth(nextMonth, nextYear);
  const leadingDays = firstWeekDay;
  const trailingDays = daysOfWeek - 1 - lastWeekDay;
  const days = [];
  if (leadingDays > 0) {
    days.push(
      ...prevMonthDays.slice(-leadingDays).map((date) => ({ inCurrent: false, date }))
    );
  }
  days.push(
    ...daysInMonth(month, year).map((date) => ({ inCurrent: true, date }))
  );
  if (trailingDays > 0) {
    days.push(
      ...nextMonthDays.slice(0, trailingDays).map((date) => ({ inCurrent: false, date }))
    );
  }
  while (days.length < 6 * daysOfWeek) {
    if (days.length < 3 * daysOfWeek) {
      days.unshift(
        ...prevMonthDays.slice(-(6 * daysOfWeek - days.length)).map((date) => ({ inCurrent: false, date }))
      );
    } else {
      days.push(
        ...nextMonthDays.slice(0, 6 * daysOfWeek - days.length).map((date) => ({ inCurrent: false, date }))
      );
    }
  }
  const weeks = [];
  for (let i = 0; i < days.length; i += daysOfWeek) {
    weeks.push(days.slice(i, i + daysOfWeek));
  }
  return weeks;
}

// windows/bar/menu/CalendarMenu.tsx
function CalendarMenu() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "calendar_menu menu",
      hexpand: true,
      children: /* @__PURE__ */ jsx(Calendar, {})
    }
  );
}
function CalendarMenu_default() {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "menu",
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.BOTTOM | Astal8.WindowAnchor.LEFT,
      setup: (self) => app_default.add_window(self),
      children: /* @__PURE__ */ jsx("box", { css: sideBarWidth((width) => `margin-left: ${width}px;`), children: /* @__PURE__ */ jsx(
        "revealer",
        {
          revealChild: revealCalendarMenu(),
          transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
          transitionDuration: ANIMATION_SPEED,
          children: /* @__PURE__ */ jsx(CalendarMenu, {})
        }
      ) })
    }
  );
}

// windows/bar/sidebar/home/sections/UserHeader.tsx
var powerMenuShown = Variable("power_button");
var powerMenuTransitionType = Variable(Gtk4.StackTransitionType.SLIDE_LEFT);
revealSideBar.subscribe((value) => {
  if (value) {
    powerMenuTransitionType.set(Gtk4.StackTransitionType.SLIDE_RIGHT);
    powerMenuShown.set("power_button");
  }
});
function PowerControls() {
  return /* @__PURE__ */ jsxs(
    "stack",
    {
      shown: powerMenuShown(),
      transitionType: powerMenuTransitionType(),
      transitionDuration: ANIMATION_SPEED,
      halign: Gtk4.Align.END,
      children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            name: "power_button",
            className: "power_button",
            halign: Gtk4.Align.END,
            valign: Gtk4.Align.CENTER,
            hexpand: true,
            cursor: "pointer",
            onClick: () => {
              powerMenuTransitionType.set(Gtk4.StackTransitionType.SLIDE_LEFT);
              powerMenuShown.set("power_menu");
            },
            children: /* @__PURE__ */ jsx("label", { label: "\u{F0425}" })
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            name: "power_menu",
            className: "power_menu",
            spacing: 8,
            vexpand: false,
            halign: Gtk4.Align.END,
            valign: Gtk4.Align.CENTER,
            children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "close",
                  cursor: "pointer",
                  onClick: () => {
                    powerMenuTransitionType.set(Gtk4.StackTransitionType.SLIDE_RIGHT);
                    powerMenuShown.set("power_button");
                  }
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => execAsync(`systemctl poweroff`),
                  children: /* @__PURE__ */ jsx(
                    "icon",
                    {
                      icon: "system-shutdown-symbolic",
                      css: "font-size: 20px;"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => execAsync(`systemctl reboot`),
                  children: /* @__PURE__ */ jsx(
                    "icon",
                    {
                      icon: "view-refresh-symbolic",
                      css: "font-size: 18px;"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => {
                    revealSideBar.set(false);
                    powerMenuShown.set("power_menu");
                    execAsync(`hyprlock`);
                  },
                  children: /* @__PURE__ */ jsx(
                    "icon",
                    {
                      icon: "system-lock-screen-symbolic",
                      css: "font-size: 18px;"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => {
                    revealSideBar.set(false);
                    powerMenuShown.set("power_menu");
                    execAsync(`bash -c 'systemctl suspend && hyprlock'`);
                  },
                  children: /* @__PURE__ */ jsx(
                    "icon",
                    {
                      icon: "weather-clear-night-symbolic",
                      css: "font-size: 18px;"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => execAsync(`hyprctl dispatch exit`),
                  children: /* @__PURE__ */ jsx(
                    "icon",
                    {
                      icon: "application-exit-symbolic",
                      css: "font-size: 18px;"
                    }
                  )
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function UserHeader_default() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "user_box",
      spacing: 12,
      children: [
        /* @__PURE__ */ jsx(
          "box",
          {
            className: "face",
            css: `background-image: url('${HOME_DIR}/.face')`
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "details",
            valign: Gtk4.Align.CENTER,
            spacing: 2,
            vertical: true,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "username",
                  label: USER,
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "wm",
                  label: "HYPRLAND",
                  xalign: 0
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsx(PowerControls, {})
      ]
    }
  );
}

// windows/bar/sidebar/home/sections/DesktopControls.tsx
import NetworkService from "gi://AstalNetwork";
import BluetoothService from "gi://AstalBluetooth";
import WpService from "gi://AstalWp";
import MprisService2 from "gi://AstalMpris";
import NotifdService from "gi://AstalNotifd";
var network = NetworkService.get_default();
var bluetooth = BluetoothService.get_default();
var audio2 = WpService.get_default().get_audio();
var spotify2 = MprisService2.Player.new("spotify");
var notifyd = NotifdService.get_default();
function ButtonIcon({ name, className, icon = "icon" }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      vertical: true,
      spacing: 6,
      children: [
        /* @__PURE__ */ jsx(
          "icon",
          {
            className,
            icon
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "name",
            label: name
          }
        )
      ]
    }
  );
}
function NetworkButton() {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "network_button",
      valign: Gtk4.Align.CENTER,
      children: bind(network, "primary").as((primary) => /* @__PURE__ */ jsxs("stack", { shown: primary.toString(), children: [
        /* @__PURE__ */ jsx("box", { name: NetworkService.Primary.WIRED.toString(), children: /* @__PURE__ */ jsx(
          ButtonIcon,
          {
            name: "WIRED",
            className: "icon",
            icon: bind(network.get_wired(), "state").as((state) => {
              switch (state) {
                case NetworkService.DeviceState.ACTIVATED:
                  return "network-wired-symbolic";
                case NetworkService.DeviceState.DISCONNECTED:
                  return "network-wired-disconnected-symbolic";
                case NetworkService.DeviceState.UNKNOWN | NetworkService.DeviceState.UNAVAILABLE:
                  return "network-wired-no-route-symbolic";
                default:
                  return "network-wireless-offline-symbolic";
              }
            })
          }
        ) }),
        /* @__PURE__ */ jsx("box", { name: NetworkService.Primary.WIFI.toString(), children: /* @__PURE__ */ jsx(
          ButtonIcon,
          {
            name: "WIFI",
            className: "icon",
            icon: bind(network.get_wifi(), "state").as((state) => {
              switch (state) {
                case NetworkService.DeviceState.ACTIVATED:
                  return "network-wireless-symbolic";
                case NetworkService.DeviceState.UNKNOWN | NetworkService.DeviceState.UNAVAILABLE:
                  return "network-wireless-offline-symbolic";
                case NetworkService.DeviceState.DISCONNECTED:
                  return "network-wireless-no-route-symbolic";
                default:
                  return "network-wireless-offline-symbolic";
              }
            })
          }
        ) })
      ] }))
    }
  );
}
function BluetoothButton() {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "blueetoth_button",
      valign: Gtk4.Align.CENTER,
      cursor: "pointer",
      onClick: () => bluetooth.toggle(),
      children: /* @__PURE__ */ jsxs(
        "stack",
        {
          shown: bind(bluetooth, "isPowered").as((isPowered) => isPowered ? "on" : "off"),
          children: [
            /* @__PURE__ */ jsx("box", { name: "on", children: /* @__PURE__ */ jsx(
              ButtonIcon,
              {
                name: "BLUE",
                className: "icon",
                icon: "bluetooth-active-symbolic"
              }
            ) }),
            /* @__PURE__ */ jsx("box", { name: "off", children: /* @__PURE__ */ jsx(
              ButtonIcon,
              {
                name: "BLUE",
                className: "icon inactive",
                icon: "bluetooth-disconnected-symbolic"
              }
            ) })
          ]
        }
      )
    }
  );
}
function MuteButton() {
  const isMute = Variable(false);
  isMute.subscribe((value) => {
    if (value) {
      audio2.get_speakers().map((speaker) => speaker.set_mute(true));
    }
    if (!value) {
      audio2.get_speakers().map((speaker) => speaker.set_mute(false));
    }
  });
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "mute_button",
      cursor: "pointer",
      valign: Gtk4.Align.CENTER,
      onClick: () => isMute.set(!isMute.get()),
      onDestroy: () => isMute.drop(),
      children: /* @__PURE__ */ jsxs("stack", { shown: isMute().as((mute) => !mute ? "active" : "silent"), children: [
        /* @__PURE__ */ jsx("box", { name: "active", children: /* @__PURE__ */ jsx(
          ButtonIcon,
          {
            name: "SILENT",
            className: "icon",
            icon: "audio-volume-high-symbolic"
          }
        ) }),
        /* @__PURE__ */ jsx("box", { name: "silent", children: /* @__PURE__ */ jsx(
          ButtonIcon,
          {
            name: "SILENT",
            className: "icon inactive",
            icon: "audio-volume-muted-symbolic"
          }
        ) })
      ] })
    }
  );
}
function DnDButton() {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "dnd_button",
      cursor: "pointer",
      valign: Gtk4.Align.CENTER,
      onClick: () => notifyd.set_dont_disturb(!notifyd.get_dont_disturb()),
      children: /* @__PURE__ */ jsxs("stack", { shown: bind(notifyd, "dontDisturb").as((isDnD) => !isDnD ? "active" : "dnd"), children: [
        /* @__PURE__ */ jsx("box", { name: "active", children: /* @__PURE__ */ jsx(
          ButtonIcon,
          {
            name: "DND",
            className: "icon",
            icon: "preferences-system-notifications"
          }
        ) }),
        /* @__PURE__ */ jsx("box", { name: "dnd", children: /* @__PURE__ */ jsx(
          ButtonIcon,
          {
            name: "DND",
            className: "icon inactive",
            icon: "notifications-disabled-symbolic"
          }
        ) })
      ] })
    }
  );
}
function ButtonControls() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "buttons",
      valign: Gtk4.Align.CENTER,
      homogeneous: true,
      spacing: 12,
      children: [
        /* @__PURE__ */ jsx(NetworkButton, {}),
        /* @__PURE__ */ jsx(BluetoothButton, {}),
        /* @__PURE__ */ jsx(MuteButton, {}),
        /* @__PURE__ */ jsx(DnDButton, {})
      ]
    }
  );
}
function Sliders() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "sliders",
      vertical: true,
      children: [
        bind(audio2, "defaultSpeaker").as((speaker) => /* @__PURE__ */ jsxs(
          "box",
          {
            className: "volume_slider",
            spacing: 12,
            children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => speaker.set_mute(!speaker.get_mute()),
                  children: /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "icon",
                      label: bind(speaker, "mute").as((isMute) => !isMute ? "\u{F057E}" : "\u{F0E08}")
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: bind(speaker, "mute").as(
                    (isMute) => isMute ? "slider mute" : "slider"
                  ),
                  cursor: "pointer",
                  value: bind(speaker, "volume"),
                  max: 1.5,
                  drawValue: false,
                  hexpand: true,
                  onDragged: ({ value }) => speaker.set_volume(value)
                }
              )
            ]
          }
        )),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "music_slider",
            spacing: 12,
            children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  cursor: "pointer",
                  onClick: () => spotify2.set_volume(spotify2.get_volume() <= 0 ? 100 : 0),
                  children: /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "icon",
                      label: bind(spotify2, "volume").as((volume) => volume <= 0 ? "\u{F038A}" : "\u{F038C}")
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: "slider",
                  cursor: "pointer",
                  value: bind(spotify2, "volume"),
                  max: 1,
                  drawValue: false,
                  hexpand: true,
                  onDragged: ({ value }) => spotify2.set_volume(value)
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function DesktopControls_default() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "desktop_controls",
      vertical: true,
      spacing: 12,
      children: [
        /* @__PURE__ */ jsx(ButtonControls, {}),
        /* @__PURE__ */ jsx(Sliders, {})
      ]
    }
  );
}

// windows/bar/sidebar/home/sections/MusicPlayer.tsx
import MprisService3 from "gi://AstalMpris";

// widgets/ProgressBar.ts
var ProgressBar = class extends astalify(Gtk4.ProgressBar) {
  static {
    GObject.registerClass(this);
  }
  constructor(props) {
    super(props);
  }
};

// windows/bar/sidebar/home/sections/MusicPlayer.tsx
var spotify3 = MprisService3.Player.new("spotify");
function MusicCover({ available }) {
  const themeChanged = Variable(false);
  monitorFile(
    `${LOCAL_STATE}/theme_changed`,
    () => themeChanged.set(!themeChanged.get())
  );
  return /* @__PURE__ */ jsx("box", { children: bind(themeChanged).as(() => /* @__PURE__ */ jsx(
    "box",
    {
      className: "cover",
      css: bind(spotify3, "coverArt").as(
        (cover) => available ? `background-image: url("${cover}");` : `background-image: url("${LOCAL_STATE}/no_music");`
      )
    }
  )) });
}
function MusicMeta({ available }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "meta",
      vertical: true,
      vexpand: true,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "title",
            label: bind(spotify3, "title").as((title) => available ? title : "No Music"),
            maxWidthChars: 8,
            truncate: true,
            justify: Gtk4.Justification.CENTER,
            hexpand: true
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "artist",
            label: bind(spotify3, "artist").as((artist) => available ? artist : "Artist"),
            maxWidthChars: 16,
            truncate: true,
            justify: Gtk4.Justification.CENTER,
            hexpand: true
          }
        )
      ]
    }
  );
}
function MusicControls({ available: _ }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "controls",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.END,
      spacing: 16,
      children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "prev control",
            cursor: "pointer",
            onClick: () => spotify3.previous(),
            children: /* @__PURE__ */ jsx("label", { label: "\u{F04AE}" })
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "toggle control",
            cursor: "pointer",
            onClick: () => spotify3.play_pause(),
            children: /* @__PURE__ */ jsx(
              "label",
              {
                label: bind(spotify3, "playbackStatus").as((status) => {
                  switch (status) {
                    case MprisService3.PlaybackStatus.STOPPED:
                      return "\u{F04DB}";
                    case MprisService3.PlaybackStatus.PAUSED:
                      return "\u{F040A}";
                    case MprisService3.PlaybackStatus.PLAYING:
                      return "\u{F03E4}";
                  }
                })
              }
            )
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "prev control",
            cursor: "pointer",
            onClick: () => spotify3.next(),
            children: /* @__PURE__ */ jsx("label", { label: "\u{F04AD}" })
          }
        )
      ]
    }
  );
}
function MusicPosition({ available }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "position",
      vertical: true,
      spacing: 4,
      children: [
        bind(spotify3, "length").as((length) => /* @__PURE__ */ jsx(
          ProgressBar,
          {
            className: "progress",
            fraction: bind(spotify3, "position").as((position) => position / length),
            hexpand: false,
            halign: Gtk4.Align.CENTER
          }
        )),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "meta",
            spacing: 8,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "current_progress",
                  label: bind(spotify3, "position").as(
                    (position) => position <= 0 ? "0:00" : `${Math.floor(spotify3.get_length() / 60)}:${String(Math.round(position) % 60).padStart(2, "0")}`
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "box",
                {
                  className: "seperator",
                  valign: Gtk4.Align.CENTER,
                  hexpand: true
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "current_progress",
                  label: bind(spotify3, "length").as(
                    (length) => !available ? "0:00" : `${Math.floor(spotify3.get_length() / 60)}:${String(Math.round(length) % 60).padStart(2, "0")}`
                  )
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function MusicPlayer_default() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "music_player",
      vexpand: false,
      children: bind(spotify3, "available").as((available) => /* @__PURE__ */ jsxs("box", { spacing: 10, children: [
        /* @__PURE__ */ jsx(MusicCover, { available }),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "right",
            vertical: true,
            children: [
              /* @__PURE__ */ jsx(MusicMeta, { available }),
              /* @__PURE__ */ jsx(MusicControls, { available }),
              /* @__PURE__ */ jsx(MusicPosition, { available })
            ]
          }
        )
      ] }))
    }
  );
}

// windows/bar/sidebar/home/sections/NotificationCenter.tsx
import NotifdService2 from "gi://AstalNotifd";

// widgets/Notification.tsx
function Notification({ notification, showDismiss }) {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "notification",
      spacing: 8,
      children: [
        /* @__PURE__ */ jsx(
          "box",
          {
            className: "image",
            css: `background-image: url("${notification.get_image() ?? `${"/home/qxb3/.config/ags"}/assets/bell.svg`}");`
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "meta",
            vertical: true,
            spacing: 4,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "appname",
                  label: notification.get_app_name().toUpperCase(),
                  truncate: true,
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    className: "summary",
                    label: notification.get_summary(),
                    justify: Gtk4.Justification.LEFT,
                    truncate: true,
                    useMarkup: true,
                    xalign: 0
                  }
                ),
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    className: "body",
                    label: `- ${notification.get_body()}`,
                    justify: Gtk4.Justification.LEFT,
                    truncate: true,
                    useMarkup: true,
                    wrap: true,
                    lines: 2,
                    xalign: 0
                  }
                )
              ] })
            ]
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "dismiss_notification",
            cursor: "pointer",
            halign: Gtk4.Align.END,
            valign: Gtk4.Align.START,
            hexpand: true,
            visible: showDismiss,
            onClick: () => notification.dismiss(),
            children: /* @__PURE__ */ jsx("label", { label: "\u{F0159}" })
          }
        )
      ]
    }
  );
}

// windows/bar/sidebar/home/sections/NotificationCenter.tsx
var notifyd2 = NotifdService2.get_default();
function Header() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "header",
      valign: Gtk4.Align.START,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "title",
            label: "Notifications",
            halign: Gtk4.Align.START,
            hexpand: true
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "clear_notifications",
            cursor: "pointer",
            halign: Gtk4.Align.END,
            onClick: () => notifyd2.get_notifications().forEach((notification) => notification.dismiss()),
            children: /* @__PURE__ */ jsx("label", { label: "\u{F039F}" })
          }
        )
      ]
    }
  );
}
function NotificationList({ notifications }) {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "notifications",
      vertical: true,
      spacing: 8,
      children: notifications.map((notification) => /* @__PURE__ */ jsx(Notification, { notification, showDismiss: true }))
    }
  );
}
function NoNotification() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "no_notification",
      halign: Gtk4.Align.CENTER,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "icon",
            label: "\u{F009B}",
            justify: Gtk4.Justification.CENTER
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "text",
            label: "No Notification",
            justify: Gtk4.Justification.CENTER
          }
        )
      ]
    }
  );
}
function Notifications() {
  return /* @__PURE__ */ jsx("scrollable", { vexpand: true, children: bind(notifyd2, "notifications").as((notifications) => notifications.length > 0 ? /* @__PURE__ */ jsx(NotificationList, { notifications }) : /* @__PURE__ */ jsx(NoNotification, {})) });
}
function NotificationCenter_default() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "notification_center",
      spacing: 8,
      vertical: true,
      vexpand: true,
      children: [
        /* @__PURE__ */ jsx(Header, {}),
        /* @__PURE__ */ jsx(Notifications, {})
      ]
    }
  );
}

// windows/bar/sidebar/home/Home.tsx
function Home_default() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      name: "home",
      className: "sidebar_home",
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(UserHeader_default, {}),
        /* @__PURE__ */ jsx(DesktopControls_default, {}),
        /* @__PURE__ */ jsx(MusicPlayer_default, {}),
        /* @__PURE__ */ jsx(NotificationCenter_default, {})
      ]
    }
  );
}

// windows/bar/sidebar/appLauncher/AppLauncher.tsx
import AppsService from "gi://AstalApps";
var apps = new AppsService.Apps({
  nameMultiplier: 2,
  entryMultiplier: 0,
  executableMultiplier: 2
});
var query = Variable("");
var queriedApps = Variable(apps.fuzzy_query(query.get()));
var selectedApp = Variable(queriedApps.get()[0]);
revealSideBar.subscribe((value) => {
  if (!value) {
    query.set("");
    queriedApps.set(apps.fuzzy_query(query.get()));
    selectedApp.set(queriedApps.get()[0]);
  }
});
function launchApp(app) {
  revealSideBar.set(false);
  sideBarShown.set("home");
  app.launch();
}
function Header2() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "header",
      valign: Gtk4.Align.START,
      spacing: 16,
      children: /* @__PURE__ */ jsxs(
        "overlay",
        {
          className: "input_container",
          passThrough: true,
          hexpand: true,
          children: [
            /* @__PURE__ */ jsx(
              "entry",
              {
                className: "input",
                onChanged: ({ text }) => {
                  query.set(text);
                  queriedApps.set(apps.fuzzy_query(text));
                  selectedApp.set(queriedApps.get()[0]);
                },
                onActivate: () => launchApp(selectedApp.get()),
                setup: (self) => {
                  self.hook(sideBarShown, () => {
                    if (sideBarShown.get() === "appLauncher" && !self.has_grab())
                      return self.grab_focus();
                    self.text = "";
                  });
                }
              }
            ),
            /* @__PURE__ */ jsx(
              "label",
              {
                className: "placeholder",
                label: query(
                  (query2) => query2.length <= 0 ? "Search Apps" : ""
                ),
                xalign: 0
              }
            )
          ]
        }
      )
    }
  );
}
function App(app) {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: selectedApp(
        (selectedApp2) => selectedApp2.name === app.name ? "app selected" : "app"
      ),
      cursor: "pointer",
      onClick: () => launchApp(app),
      onKeyPressEvent: (_, event) => {
        if (event.get_keycode().pop() === 36) {
          launchApp(app);
        }
      },
      setup: (self) => {
        self.connect("focus-in-event", () => {
          selectedApp.set(app);
        });
      },
      children: /* @__PURE__ */ jsxs("box", { spacing: 8, children: [
        /* @__PURE__ */ jsx(
          "icon",
          {
            className: "icon",
            icon: app.iconName,
            css: "font-size: 32px;"
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "name",
            label: app.name
          }
        )
      ] })
    }
  );
}
function Applications() {
  return /* @__PURE__ */ jsx("scrollable", { vexpand: true, children: /* @__PURE__ */ jsx(
    "box",
    {
      className: "apps",
      vertical: true,
      spacing: 8,
      children: queriedApps(
        (apps2) => apps2.map((app) => App(app))
      )
    }
  ) });
}
function AppLauncher_default() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      name: "appLauncher",
      className: "sidebar_appLauncher",
      spacing: 8,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(Header2, {}),
        /* @__PURE__ */ jsx(Applications, {})
      ]
    }
  );
}

// windows/bar/sidebar/wallpapers/Wallpapers.tsx
import GdkPixbuf from "gi://GdkPixbuf";
function getWallpapers() {
  return exec(`find -L ${LOCAL_STATE}/wallpapers -iname '*.png'`).split("\n");
}
function Wallpapers() {
  const wallpapers = Variable(getWallpapers());
  monitorFile(
    `${LOCAL_STATE}/theme_changed`,
    () => wallpapers.set(getWallpapers())
  );
  return /* @__PURE__ */ jsx("scrollable", { vexpand: true, children: /* @__PURE__ */ jsx(
    "box",
    {
      className: "list",
      vertical: true,
      spacing: 12,
      children: wallpapers((wallpapers2) => wallpapers2.map((wallpaper) => /* @__PURE__ */ jsx(
        "button",
        {
          className: "wallpaper",
          cursor: "pointer",
          onClick: () => {
            exec(`ln -sf ${wallpaper} ${LOCAL_STATE}/current_wallpaper`);
            execAsync(`swww img ${LOCAL_STATE}/current_wallpaper --transition-type "wipe" --transition-duration 3`);
            execAsync(`rm -rf ${HOME_DIR}/.cache/fastfetch/images`);
            execAsync(`magick ${wallpaper} -gravity Center -crop 1:1 -resize 500x500 +repage ${LOCAL_STATE}/current_wallpaper.crop`);
            sideBarShown.set("home");
            revealSideBar.set(false);
          },
          children: /* @__PURE__ */ jsxs("overlay", { children: [
            /* @__PURE__ */ jsx("box", { className: "img_container" }),
            /* @__PURE__ */ jsx(
              "icon",
              {
                className: "img",
                pixbuf: GdkPixbuf.Pixbuf.new_from_file(wallpaper)
              }
            )
          ] })
        }
      )))
    }
  ) });
}
function Wallpapers_default() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      name: "wallpapers",
      className: "wallpapers",
      vertical: true,
      children: /* @__PURE__ */ jsx(Wallpapers, {})
    }
  );
}

// windows/bar/sidebar/themes/Themes.tsx
function getThemes() {
  const themes = exec(`find -L ${"/home/qxb3/.config/ags"}/themes -iname '*.scss' ! -name 'current.scss'`).split("\n").map((file) => ({
    name: file.split("/").pop().replace(".scss", ""),
    path: file,
    lines: readFile(file).split("\n").filter((line) => line.startsWith("$") && line.includes("#"))
  }));
  return themes.map((theme) => ({
    name: theme.name,
    path: theme.path,
    colors: theme.lines.map((line) => {
      const [identifier, value] = line.split(":");
      const name = identifier.replace("$", "").trim();
      const color = value.replace(";", "").trim();
      return { name, color };
    })
  }));
}
function ThemeName({ theme }) {
  return /* @__PURE__ */ jsx(
    "box",
    {
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx(
        "label",
        {
          className: "name",
          label: theme.name,
          justify: Gtk4.Justification.CENTER,
          hexpand: true,
          css: `color: ${theme.colors.find(
            (color) => color.name === "fg"
          ).color}`
        }
      )
    }
  );
}
function ThemeColors({ theme }) {
  return /* @__PURE__ */ jsx(
    FlowBox,
    {
      className: "colors",
      maxChildrenPerLine: 4,
      columnSpacing: 8,
      rowSpacing: 8,
      homogeneous: true,
      children: theme.colors.map(({ name: _, color }) => /* @__PURE__ */ jsx(
        "box",
        {
          className: "color",
          css: `background-color: ${color}`
        }
      ))
    }
  );
}
function ApplyThemeButton({ theme }) {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: "apply_theme_button",
      cursor: "pointer",
      css: `background-color: ${theme.colors.find(
        (color) => color.name === "green"
      ).color}`,
      onClick: () => {
        sideBarShown.set("home");
        revealSideBar.set(false);
        const currentTheme = exec(`readlink ${LOCAL_STATE}/ags_theme.scss`).split("/").pop().replace(".scss", "");
        if (currentTheme === theme.name)
          return execAsync(`notify-send -a 'ags' 'Theme Manager' 'Already have the same theme.'`);
        exec(`ln -sf ${theme.path} ${LOCAL_STATE}/ags_theme.scss`);
        execAsync(`bash -c '${"/home/qxb3/.config/ags"}/themes/sync.sh ${theme.name}'`);
        execAsync(`notify-send -a 'ags' 'Theme Manager' 'Successfuly changed the theme to ${theme.name}. Restart the session to update the gtk theme.'`);
      },
      children: /* @__PURE__ */ jsx(
        "label",
        {
          label: "Apply Theme",
          css: `color: ${theme.colors.find(
            (color) => color.name === "bg"
          ).color}`
        }
      )
    }
  );
}
function Themes() {
  const themes = getThemes();
  return /* @__PURE__ */ jsx("scrollable", { vexpand: true, children: /* @__PURE__ */ jsx(
    "box",
    {
      className: "list",
      vertical: true,
      spacing: 16,
      children: themes.map((theme) => /* @__PURE__ */ jsxs(
        "box",
        {
          className: "theme",
          vertical: true,
          spacing: 12,
          css: `background-color: ${theme.colors.find((color) => color.name === "bgh").color}`,
          children: [
            /* @__PURE__ */ jsx(ThemeName, { theme }),
            /* @__PURE__ */ jsx(ThemeColors, { theme }),
            /* @__PURE__ */ jsx(ApplyThemeButton, { theme })
          ]
        }
      ))
    }
  ) });
}
function Themes_default() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      name: "themes",
      className: "themes",
      children: /* @__PURE__ */ jsx(Themes, {})
    }
  );
}

// windows/bar/sidebar/SideBar.tsx
function SideBar_default() {
  return /* @__PURE__ */ jsx(
    "revealer",
    {
      revealChild: revealSideBar(),
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      transitionDuration: ANIMATION_SPEED,
      setup: (self) => {
        self.connect("size-allocate", () => {
          sideBarWidth.set(self.get_allocated_width());
        });
      },
      children: /* @__PURE__ */ jsxs(
        "stack",
        {
          shown: sideBarShown(),
          transitionType: Gtk4.StackTransitionType.SLIDE_RIGHT,
          transitionDuration: ANIMATION_SPEED,
          children: [
            /* @__PURE__ */ jsx(Home_default, {}),
            /* @__PURE__ */ jsx(AppLauncher_default, {}),
            /* @__PURE__ */ jsx(Wallpapers_default, {}),
            /* @__PURE__ */ jsx(Themes_default, {})
          ]
        }
      )
    }
  );
}

// windows/bar/Bar.tsx
var hyprland = HyprlandService.get_default();
var tray = TrayService.get_default();
var battery3 = BatteryService3.get_default();
function Divider2() {
  return /* @__PURE__ */ jsx("box", { className: "divider" });
}
function StartSection() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "start",
      valign: Gtk4.Align.START,
      halign: Gtk4.Align.CENTER,
      spacing: 4,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "sidebar_button",
            cursor: "pointer",
            onClick: () => revealSideBar.set(!revealSideBar.get()),
            children: /* @__PURE__ */ jsx("box", { css: `background-image: url("/home/${exec("whoami")}/.face")` })
          }
        ),
        /* @__PURE__ */ jsx(Divider2, {}),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: sideBarShown(
              (shown) => shown === "appLauncher" ? "search_button active" : "search_button"
            ),
            cursor: "pointer",
            onClick: () => {
              sideBarShown.set(
                sideBarShown.get() === "appLauncher" ? "home" : "appLauncher"
              );
              revealSideBar.set(true);
            },
            children: /* @__PURE__ */ jsx("label", { label: "\uE68F" })
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: sideBarShown(
              (shown) => shown === "wallpapers" ? "wallpaper_button active" : "wallpaper_button"
            ),
            cursor: "pointer",
            onClick: () => {
              sideBarShown.set(
                sideBarShown.get() === "wallpapers" ? "home" : "wallpapers"
              );
              revealSideBar.set(true);
            },
            children: /* @__PURE__ */ jsx("label", { label: "\u{F0E09}" })
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: sideBarShown(
              (shown) => shown === "themes" ? "themes_button active" : "themes_button"
            ),
            cursor: "pointer",
            onClick: () => {
              sideBarShown.set(
                sideBarShown.get() === "themes" ? "home" : "themes"
              );
              revealSideBar.set(true);
            },
            children: /* @__PURE__ */ jsx("label", { label: "\uEB5C" })
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "systray",
            vertical: true,
            children: [
              /* @__PURE__ */ jsx(
                "revealer",
                {
                  revealChild: revealSysTray((v) => v),
                  transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
                  transitionDuration: ANIMATION_SPEED,
                  children: /* @__PURE__ */ jsx(
                    "box",
                    {
                      className: "apps",
                      vertical: true,
                      spacing: 8,
                      children: bind(tray, "items").as((apps2) => apps2.map(
                        (app) => /* @__PURE__ */ jsx(
                          "button",
                          {
                            className: "app",
                            cursor: "pointer",
                            onClickRelease: (_self, event) => {
                              if (event.button === Astal8.MouseButton.PRIMARY) app.activate(0, 0);
                            },
                            children: /* @__PURE__ */ jsx(
                              "icon",
                              {
                                gIcon: app.gicon,
                                css: "font-size: 22px;"
                              }
                            )
                          }
                        )
                      ))
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "button",
                  cursor: "pointer",
                  onClick: () => revealSysTray.set(!revealSysTray.get()),
                  setup: (self) => {
                    self.hook(revealSysTray, () => {
                      if (revealSysTray.get())
                        timeout(5e3, () => revealSysTray.set(false));
                    });
                  },
                  children: /* @__PURE__ */ jsx("label", { label: revealSysTray((v) => v ? "\u{F0143}" : "\u{F0140}") })
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function CenterSection() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "center",
      valign: Gtk4.Align.CENTER,
      vertical: true,
      spacing: 8,
      children: /* @__PURE__ */ jsx(
        "box",
        {
          className: "workspace",
          vertical: true,
          spacing: 4,
          children: Array.from({ length: 5 }).map(
            (_, i) => /* @__PURE__ */ jsx(
              "button",
              {
                className: "button",
                cursor: "pointer",
                halign: Gtk4.Align.CENTER,
                onClick: () => hyprland.message(`dispatch workspace ${i + 1}`),
                setup: (self) => {
                  self.hook(hyprland, "event", () => {
                    self.toggleClassName("active", hyprland.get_focused_workspace().get_id() === i + 1);
                  });
                }
              }
            )
          )
        }
      )
    }
  );
}
function EndSection() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "end",
      valign: Gtk4.Align.END,
      halign: Gtk4.Align.CENTER,
      vertical: true,
      spacing: 4,
      children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "desktop_controls",
            vertical: true,
            children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "audio",
                  cursor: "pointer",
                  setup: () => /* @__PURE__ */ jsx(AudioControlsMenu_default, {}),
                  onClick: () => revealAudioControlsMenu.set(!revealAudioControlsMenu.get()),
                  children: /* @__PURE__ */ jsx("label", { label: "\u{F02CE}" })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "system",
                  cursor: "pointer",
                  setup: () => /* @__PURE__ */ jsx(SystemControlsMenu_default, {}),
                  onClick: () => revealSystemControlsMenu.set(!revealSystemControlsMenu.get()),
                  children: /* @__PURE__ */ jsx("label", { label: "\uF1DE" })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: bind(battery3, "charging").as(
                    (charging) => charging ? "battery charging" : "battery discharging"
                  ),
                  cursor: "pointer",
                  visible: bind(battery3, "device_type").as(
                    (type) => type === BatteryService3.Type.BATTERY ? true : false
                  ),
                  setup: () => /* @__PURE__ */ jsx(BatteryMenu_default, {}),
                  onClick: () => revealBatteryMenu.set(!revealBatteryMenu.get()),
                  children: bind(battery3, "charging").as((charging) => /* @__PURE__ */ jsx(BatteryIcon, { charging }))
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "screenshot",
                  cursor: "pointer",
                  onClick: () => execAsync(`bash -c '~/.config/hypr/scripts/screenshot.sh p'`),
                  children: /* @__PURE__ */ jsx("label", { label: "\u{F0104}" })
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "time",
            cursor: "pointer",
            setup: () => /* @__PURE__ */ jsx(CalendarMenu_default, {}),
            onClick: () => revealCalendarMenu.set(!revealCalendarMenu.get()),
            children: /* @__PURE__ */ jsx("label", { label: time() })
          }
        )
      ]
    }
  );
}
function Bar_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "bar",
      application: app_default,
      gdkmonitor,
      exclusivity: Astal8.Exclusivity.IGNORE,
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.BOTTOM | Astal8.WindowAnchor.LEFT,
      keymode: sideBarShown(
        (shown) => shown === "appLauncher" ? Astal8.Keymode.EXCLUSIVE : Astal8.Keymode.NONE
      ),
      setup: (bar) => {
        /* @__PURE__ */ jsx(
          "window",
          {
            namespace: "bar",
            application: app_default,
            gdkmonitor,
            exclusivity: Astal8.Exclusivity.EXCLUSIVE,
            layer: Astal8.Layer.BOTTOM,
            anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.BOTTOM | Astal8.WindowAnchor.LEFT,
            setup: (self) => app_default.add_window(self),
            children: /* @__PURE__ */ jsx("box", { css: `min-width: ${bar.get_allocated_width() ?? 1}px` })
          }
        );
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx(SideBar_default, {}),
        /* @__PURE__ */ jsx("box", { className: "bar", children: /* @__PURE__ */ jsxs(
          "centerbox",
          {
            className: "sections",
            vertical: true,
            children: [
              /* @__PURE__ */ jsx(StartSection, {}),
              /* @__PURE__ */ jsx(CenterSection, {}),
              /* @__PURE__ */ jsx(EndSection, {})
            ]
          }
        ) })
      ] })
    }
  );
}

// windows/notificationPopups/NotificationPopups.tsx
import NotifydService from "gi://AstalNotifd";
var TIMEOUT_DELAY = 5e3;
var notifyd3 = NotifydService.get_default();
var popups = Variable([]);
notifyd3.connect("notified", (_, id) => {
  if (notifyd3.get_dont_disturb()) return;
  const notification = notifyd3.get_notification(id);
  popups.set([...popups.get(), notification]);
});
function removePopup(id) {
  const filteredPopups = popups.get().filter((popup) => id !== popup.id);
  popups.set(filteredPopups);
}
function NotificationPopups() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "notification_popups",
      spacing: 8,
      vertical: true,
      children: popups().as((popupNotifs) => popupNotifs.map((popupNotif) => /* @__PURE__ */ jsx(
        "eventbox",
        {
          onClick: () => removePopup(popupNotif.id),
          setup: () => timeout(TIMEOUT_DELAY, () => removePopup(popupNotif.id)),
          children: /* @__PURE__ */ jsx(Notification, { notification: popupNotif, showDismiss: false })
        }
      )))
    }
  );
}
function NotificationPopups_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "notifications",
      application: app_default,
      gdkmonitor,
      exclusivity: Astal8.Exclusivity.IGNORE,
      layer: Astal8.Layer.OVERLAY,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.RIGHT,
      children: /* @__PURE__ */ jsx(NotificationPopups, {})
    }
  );
}

// requestHandler.ts
function handleSideBar(request) {
  const [state, shown] = request;
  if (!state) return `err [msg="'state' is required"]`;
  if (!shown) return `err [msg="'shown' is required"]`;
  if (state === "toggle") {
    switch (shown) {
      case "home":
        revealSideBar.set(!revealSideBar.get());
        return `ok [cmd="toggle",state=${revealSideBar.get()},shown="${sideBarShown.get()}"]`;
      case "appLauncher":
      case "wallpapers":
        if (!revealSideBar.get()) revealSideBar.set(true);
        sideBarShown.set(sideBarShown.get() === shown ? "home" : shown);
        return `ok [cmd="toggle",state=${revealSideBar.get()},shown="${sideBarShown.get()}"]`;
    }
  }
  if (state === "open") {
    sideBarShown.set(shown);
    revealSideBar.set(true);
    return `ok [cmd="open",state=${revealSideBar.get()},shown="${sideBarShown.get()}"]`;
  }
  if (state === "close") {
    sideBarShown.set("home");
    revealSideBar.set(false);
    return `ok [cmd="close",state=${revealSideBar.get()}]`;
  }
  return 'err [msg="unknown request"]';
}
function requestHandler(request, res) {
  if (request.startsWith("sidebar")) {
    const result = handleSideBar(request.split(":").slice(-2));
    return res(result);
  }
}

// app.ts
app_default.start({
  css: compileScss(),
  main() {
    const mainMonitor = app_default.get_monitors().at(0);
    Bar_default(mainMonitor);
    NotificationPopups_default(mainMonitor);
  },
  requestHandler
});
